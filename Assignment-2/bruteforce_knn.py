# -*- coding: utf-8 -*-
"""BruteForce_KNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e4poE4cql5G8k_l-yAt0-3Agy4zbgBc4
"""

import numpy as np

def generateData(samples, dim):
    return np.random.random((samples, dim)) 
def sampleQueryPointsIndices(samples,data):
    return np.random.randint(data.shape[0], size=samples)
#data[np.random.randint(data.shape[0], size=samples),:]
# A[np.random.randint(A.shape[0], size=2), :]

def distance(point1 , point2, norm):
    if norm == '1':
        return np.linalg.norm(point1-point2,1)
    if norm == '2':
        return np.linalg.norm(point1-point2,2)
    if norm == 'inf':
        return np.linalg.norm(point1-point2,np.inf)

def getRatio(query_point_index, data):
    query_point = data[query_point_index,:]
    
    farthest_distance1 = 0
    farthest_distance2 = 0
    farthest_distance_inf = 0
    
    closest_distance1 = 10000000
    closest_distance2 = 10000000
    closest_distance_inf = 10000000
    
    # count = 0
    for i in range(data.shape[0]):
        # count +=1
        # if count%100000 == 0:
        #   print(count, 'done')
        if i == query_point_index :
            continue
        point = data[i,:]
        curr1 = distance(query_point, point,'1')
        curr2 = distance(query_point, point,'2')
        curr_inf = distance(query_point, point,'inf')
        if farthest_distance1 < curr1:
            farthest_distance1 = curr1
        if farthest_distance2 < curr2:
            farthest_distance2 = curr2
        if farthest_distance_inf < curr_inf:
            farthest_distance_inf = curr_inf
            
        if closest_distance1 > curr1:
            closest_distance1 = curr1
        if closest_distance2 > curr2:
            closest_distance2 = curr2
        if closest_distance_inf > curr_inf:
            closest_distance_inf = curr_inf
#         print(curr1)
    
    
    # print(closest_distance1)
    return farthest_distance1/closest_distance1 , farthest_distance2/closest_distance2,farthest_distance_inf/closest_distance_inf

def averageRatio(samples,dim): #100 samples
    data = generateData(1000000,dim)
    sample_indices = sampleQueryPointsIndices(samples,data)
    ratio1 = 0
    ratio2 = 0
    ratio_inf = 0
    # count = 0
    for index in sample_indices:
        # count +=1
        # print(count, 'query points done')
        r1, r2, r_inf = getRatio(index,data)
        ratio1 = ratio1 + r1
        ratio2 = ratio2 + r2
        ratio_inf = ratio_inf + r_inf
        # print(r1,r2,r_inf)
        
    avg_ratio1 = ratio1/samples
    avg_ratio2 = ratio2/samples
    avg_ratio_inf = ratio_inf/samples
    return avg_ratio1,avg_ratio2,avg_ratio_inf

# print(averageRatio(1,64))

dimensions = [1, 2, 4, 8, 16, 32, 64]
ratio_dict = {}
for dim in dimensions:
    ratio_dict[dim] = averageRatio(100,dim)
    # print(ratio_dict)
# print('final',ratio_dict)

# ratio_dict = {1: (6520785.9197512, 6520785.9197512, 6520785.9197512), 2: (3267.145277837376, 2934.0418573778325, 2579.2721461529495), 4: (109.32737608326265, 92.62924050386685, 75.50757647086714), 8: (16.60016301395862, 13.480829455806006, 10.862768085264952), 16: (6.176338741888868, 5.095409656835759, 4.137774653001719), 32: (3.392917935745722, 2.8609025679964244, 2.4162037277127313), 64: (2.315536627404967, 2.019258177952031, 1.7472591790712526)}

# print(ratio_dict)



dimensions = [1, 2, 4, 8, 16, 32, 64]
import csv
with open('data.csv', 'w', newline='') as file:
  writer = csv.writer(file)
  for dim in dimensions:
    a,b,c = ratio_dict[dim]
    writer.writerow([a, b, c])

